# Default values for safe-stack.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Provide a name in place of safe-stack for `app:` labels
##
nameOverride: ""
## Provide a name to substitute for the full names of resources
##
fullnameOverride: ""
## Reference to one or more secrets to be used when pulling images
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
##
imagePullSecrets: []

##
## ---------------------------------------------------------------------------
## TXS-SERVICE CONFIGURATION
## for more options see xxxxxxx
##
safe-transaction-service:
  enabled: true
  replicaCount: 1
  image:
    repository: safeglobal/safe-transaction-service
    tag: latest
    pullPolicy: Always
  extraEnv: []
  config:
    debug: true
    queues: default,indexing,contracts,tokens,notifications,webhooks
    secretKey: "Very-secure-secret-string"
    csrf:
      trustedOrigins: "https://safe-wallet.minikube.net"
    node:
      url: # leave empty if you use ganache
      useGanacheNode: true
    database:
      runMigration: true
      url: # leave empty unless useExisting=true e.g plsql://
    redis: 
      url: # leave empty unless useExisting=true e.g redis://
    rabbitmq: 
      url: # leave empty unless useExisting=true e.g amqp://
      user: guest
      password: guest
    admin:
      auth:
        enabled: true
        username: root
        password: root123
        email: root@example.com
  scheduler:
    nodeSelector: {}
    affinity: {}
    tolerations: {}
    securityContext: {}
    podSecurityContext: {}
    resources:
      requests:
        memory: "100Mi"
        cpu: "50m"
      limits:
        memory: "200Mi"
        cpu: "100m"
  indexer:
    nodeSelector: {}
    affinity: {}
    tolerations: {}
    securityContext: {}
    podSecurityContext: {}
    resources: 
      requests:
        memory: "300Mi"
        cpu: "50m"
      limits:
        memory: "600Mi"
        cpu: "100m"
  web:
    nodeSelector: {}
    affinity: {}
    tolerations: {}
    securityContext: {}
    podSecurityContext: {}
    resources:
      requests:
        memory: "1000Mi"
        cpu: "500m"
      limits:
        memory: "2000Mi"
        cpu: "1000m"
  ingress:
    enabled: true
    ingressClassName: nginx
    host: txs-service.minikube.net
    annotations: 
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/enable-cors: "false"
  ganacheNode:
    enabled: true
    config:
      mnemonic: "test test test test test test test test test test test junk"
      chainId: 1337
      persistence:
        storageClass: standard
        size: 100Mi
    ingress:
      enabled: true
      ingressClassName: nginx
      host: node.minikube.net
      annotations: {}
  safe-transaction-service-postgresql:
    enabled: true
    global:
      postgresql:
        auth:
          username: safe
          password: changeme
          database: txs
    primary:
      persistence:
        enabled: true
        storageClass: "standard"
        size: 100Mi
  safe-transaction-service-redis:
    enabled: true
    auth:
      enabled: false
    master:
      persistence:
        enabled: true
        storageClass: "standard"
        size: 100Mi
    replica:
      replicaCount: 0
  safe-transaction-service-rabbitmq:
    enabled: true
    auth:
      username: guest
      password: guest
    persistence:
      enabled: true
      storageClass: "standard"
      size: 100Mi

##
## ---------------------------------------------------------------------------
## CFG-SERVICE CONFIGURATION
## for more options see xxxxxxx
##
safe-config-service:
  enabled: true
  replicaCount: 1
  image:
    repository: safeglobal/safe-config-service
    tag: latest
    pullPolicy: Always
  extraEnv: []
  config:
    debug: true
    secretKey: "insecure_key_for_dev"
    csrf:
      trustedOrigins: "https://safe-wallet.minikube.net"
    clientGateway:
      url: "http://safe-stack-safe-client-gateway-web.default.svc.cluster.local"
      token: "1234567890"
    database:
      runMigration: true
      host: # leave empty if postgresql.enabled=true
      port: # leave empty if postgresql.enabled=true
      password: # leave empty if postgresql.enabled=true
      user: # leave empty if postgresql.enabled=true
      db: # leave empty if postgresql.enabled=true
    admin:
      auth:
        enabled: true
        username: root
        password: root123
        email: root@example.com
  web:
    nodeSelector: {}
    affinity: {}
    tolerations: {}
    securityContext: {}
    podSecurityContext: {}
    resources: {}
      # requests: ## crashing the pod
      #   memory: "1000Mi"
      #   cpu: "150m"
      # limits:
      #   memory: "2000Mi"
      #   cpu: "300m"    
  ingress:
    enabled: true
    ingressClassName: nginx
    host: cfg-service.minikube.net
    annotations: 
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/enable-cors: "false"
  safe-config-service-postgresql:
    enabled: true
    global:
      postgresql:
        auth:
          username: safe
          password: changeme
          database: cfg
    primary:
      persistence:
        enabled: true
        storageClass: "standard"
        size: 100Mi

##
## ---------------------------------------------------------------------------
## CGW-SERVICE CONFIGURATION
## for more options see xxxxxxx
##
safe-client-gateway:
  enabled: true
  replicaCount: 1
  image:
    repository: safeglobal/safe-client-gateway-nest
    tag: latest
    pullPolicy: Always
  extraEnv: []
  config:
    debug: true
    cfgService:
      url: "http://safe-stack-safe-config-service-web.default.svc.cluster.local"
    security:
      authToken: "1234567890"
    redis: 
      host: # leave empty unless useExisting=true
      port: 6379
  web:
    nodeSelector: {}
    affinity: {}
    tolerations: {}
    securityContext: {}
    podSecurityContext: {}
    resources:
      requests:
        memory: "300Mi"
        cpu: "300m"
      limits:
        memory: "600Mi"
        cpu: "600m" 
  ingress:
    enabled: true
    ingressClassName: nginx
    host: cgw-service.minikube.net
    annotations: 
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-methods: "OPTIONS, GET, HEAD, DELETE, PUT, POST"
      nginx.ingress.kubernetes.io/cors-allow-origin: "https://*.minikube.net"
      nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Safe-Wallet-Signature,Safe-Wallet-Signature-Timestamp"
  safe-client-gateway-redis:
    enabled: true
    auth:
      enabled: false
    master:
      persistence:
        enabled: true
        storageClass: "standard"
        size: 100Mi
    replica:
      replicaCount: 0

##
## ---------------------------------------------------------------------------
## SAFE-WALLET CONFIGURATION
## for more options see xxxxxxx
##
safe-wallet-web:
  enabled: true
  replicaCount: 1
  image:
    repository: gjeanmart/safe-wallet-web # safeglobal/safe-wallet-web
    tag: force_safe_deployment # latest
    pullPolicy: Always
  extraEnv: []
  config:
    clientGateway:
      url: "https://cgw-service.minikube.net"
    walletConnect:
      projectId: ""
      bridge: ""
  ingress:
    enabled: true
    ingressClassName: nginx
    host: safe-wallet.minikube.net
    annotations:
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/enable-cors: "false"
