# Default values for safe-stack.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Provide a name in place of safe-stack for `app:` labels
##
nameOverride: ""
## Provide a name to substitute for the full names of resources
##
fullnameOverride: ""
## Reference to one or more secrets to be used when pulling images
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
##
imagePullSecrets: []

##
## ---------------------------------------------------------------------------
## TXS-SERVICE CONFIGURATION
## for more options see xxxxxxx
##
safe-transaction-service:
  txsService:
    enabled: true
    replicaCount: 1
    image:
      repository: safeglobal/safe-transaction-service
      tag: latest
      pullPolicy: Always
    extraEnv: []
    config:
      debug: true
      queues: default,indexing,contracts,tokens,notifications,webhooks
      secretKey: "Very-secure-secret-string"
      csrf:
        trustedOrigins: "https://safe-wallet.minikube.net"
      node:
        url: # leave empty if you use ganache
        useGanacheNode: true
      database:
        runMigration: true
        useExisting: false
        url: # leave empty unless useExisting=true e.g plsql://
        password: postgres
        user: postgres
        db: txs
        port: 5432
        persistence:
          storageClass: standard
          size: 100Mi
      redis: 
        useExisting: false
        url: # leave empty unless useExisting=true e.g redis://
      rabbitmq: 
        useExisting: false
        url: # leave empty unless useExisting=true e.g amqp://
        user: guest
        password: guest
      admin:
        auth:
          enabled: true
          username: root
          password: root123
          email: root@example.com
    scheduler:
      nodeSelector: {}
      affinity: {}
      tolerations: {}
      securityContext: {}
      podSecurityContext: {}
      resources:
        requests:
          memory: "100Mi"
          cpu: "50m"
        limits:
          memory: "200Mi"
          cpu: "100m"
    indexer:
      nodeSelector: {}
      affinity: {}
      tolerations: {}
      securityContext: {}
      podSecurityContext: {}
      resources: 
        requests:
          memory: "300Mi"
          cpu: "50m"
        limits:
          memory: "600Mi"
          cpu: "100m"
    web:
      nodeSelector: {}
      affinity: {}
      tolerations: {}
      securityContext: {}
      podSecurityContext: {}
      resources:
        requests:
          memory: "1000Mi"
          cpu: "500m"
        limits:
          memory: "2000Mi"
          cpu: "1000m"
    ingress:
      enabled: true
      ingressClassName: nginx
      host: txs-service.minikube.net
      annotations: 
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/enable-cors: "false"
  ganacheNode:
    enabled: true
    config:
      mnemonic: "test test test test test test test test test test test junk"
      chainId: 1337
      persistence:
        storageClass: standard
        size: 100Mi
    ingress:
      enabled: true
      ingressClassName: nginx
      host: node.minikube.net
      annotations: {}

##
## ---------------------------------------------------------------------------
## CFG-SERVICE CONFIGURATION
## for more options see xxxxxxx
##
safe-config-service:
  cfgService:
    enabled: true
    replicaCount: 1
    image:
      repository: safeglobal/safe-config-service
      tag: latest
      pullPolicy: Always
    extraEnv: []
    config:
      debug: true
      secretKey: "insecure_key_for_dev"
      csrf:
        trustedOrigins: "https://safe-wallet.minikube.net"
      clientGateway:
        url: "http://safe-stack-safe-client-gateway-web.default.svc.cluster.local"
        token: "1234567890"
      database:
        runMigration: true
        useExisting: false
        password: postgres
        user: postgres
        db: cfg
        host: # leave empty unless useExisting=true e.g plsql://
        port: 5432
        persistence:
          storageClass: standard
          size: 100Mi
      admin:
        auth:
          enabled: true
          username: root
          password: root123
          email: root@example.com
    web:
      nodeSelector: {}
      affinity: {}
      tolerations: {}
      securityContext: {}
      podSecurityContext: {}
      resources: {}
        # requests: ## crashing the pod
        #   memory: "1000Mi"
        #   cpu: "150m"
        # limits:
        #   memory: "2000Mi"
        #   cpu: "300m"    
    ingress:
      enabled: true
      ingressClassName: nginx
      host: cfg-service.minikube.net
      annotations: 
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/enable-cors: "false"

##
## ---------------------------------------------------------------------------
## CGW-SERVICE CONFIGURATION
## for more options see xxxxxxx
##
safe-client-gateway:
  cgwService:
    enabled: true
    replicaCount: 1
    image:
      repository: safeglobal/safe-client-gateway-nest
      tag: latest
      pullPolicy: Always
    extraEnv: []
    config:
      debug: true
      cfgService:
        url: "http://safe-stack-safe-config-service-web.default.svc.cluster.local"
      security:
        authToken: "1234567890"
      redis: 
        useExisting: false
        host: # leave empty unless useExisting=true
        port: 6379
    web:
      nodeSelector: {}
      affinity: {}
      tolerations: {}
      securityContext: {}
      podSecurityContext: {}
      resources:
        requests:
          memory: "300Mi"
          cpu: "300m"
        limits:
          memory: "600Mi"
          cpu: "600m" 
    ingress:
      enabled: true
      ingressClassName: nginx
      host: cgw-service.minikube.net
      annotations: 
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        nginx.ingress.kubernetes.io/cors-allow-methods: "OPTIONS, GET, HEAD, DELETE, PUT, POST"
        nginx.ingress.kubernetes.io/cors-allow-origin: "https://*.minikube.net"
        nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Safe-Wallet-Signature,Safe-Wallet-Signature-Timestamp"


##
## ---------------------------------------------------------------------------
## SAFE-WALLET CONFIGURATION
## for more options see xxxxxxx
##
safe-wallet-web:
  walletWeb:
    enabled: true
    replicaCount: 1
    image:
      repository: gjeanmart/safe-wallet-web #safeglobal/safe-wallet-web
      tag: force_safe_deployment #latest
      pullPolicy: Always
    extraEnv: []
    config:
      clientGateway:
        url: "https://cgw-service.minikube.net"
      walletConnect:
        projectId: ""
        bridge: ""
    ingress:
      enabled: true
      ingressClassName: nginx
      host: safe-wallet.minikube.net
      annotations:
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          nginx.ingress.kubernetes.io/enable-cors: "false"

## [TODO] if using dependency
# ##
# ## PostgreSQL chart configuration
# ## for more options see https://github.com/bitnami/charts/tree/main/bitnami/postgresql
# ##
# postgresql:
#   enabled: false
#   global:
#     postgresql:
#       # global.postgresql.auth overrides postgresql.auth
#       auth:
#         username: safe
#         password: changeme
#         database: txs
#         # Name of existing secret to use for PostgreSQL credentials.
#         # auth.postgresPassword, auth.password, and auth.replicationPassword will be ignored and picked up from this secret.
#         # secret might also contains the key ldap-password if LDAP is enabled.
#         # ldap.bind_password will be ignored and picked from this secret in this case.
#         existingSecret: ""
#         # Names of keys in existing secret to use for PostgreSQL credentials
#         secretKeys:
#           adminPasswordKey: ""
#           userPasswordKey: ""
#           replicationPasswordKey: ""
#   primary:
#     persistence:
#       enabled: false
#       # Use an existing Persistent Volume Claim (must be created ahead of time)
#       # existingClaim: ""
#       # storageClass: ""

# ##
# ## Redis chart configuration
# ## for more options see https://github.com/bitnami/charts/tree/main/bitnami/redis
# ##
# redis:
#   enabled: false
#   auth:
#     enabled: true
#     password: changeme
#     # name of an existing secret with Redis® credentials (instead of auth.password), must be created ahead of time
#     existingSecret: ""
#     # Password key to be retrieved from existing secret
#     existingSecretPasswordKey: ""

# ##
# ## RabbitMQ chart configuration
# ## for more options see https://github.com/bitnami/charts/tree/main/bitnami/rabbitmq
# ##
# rabbitmq:
#   enabled: false
#   auth:
#     enabled: true
#     password: changeme
#     # name of an existing secret with RabbitMQ® credentials (instead of auth.password), must be created ahead of time
#     existingSecret: ""
#     # Password key to be retrieved from existing secret
#     existingSecretPasswordKey: ""